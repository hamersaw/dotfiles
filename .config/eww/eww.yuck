;; bar window
(defwindow bar
           :monitor 0
           :geometry (geometry :x "6px"
                               :y "-60px"
                               :width "50px"
                               :height "1188px"
                               :anchor "center right")
            :stacking "fg"

            :exclusive true
            :focusable false

            :reserve (struts :distance "60px" :side "right")
            :windowtype "dock"
            :wm-ignore false

            :vexpand "false"
            :hexpand "false"
(bar))

;; organizational widgets
(defwidget bar []
        (box :class "bar"
                :orientation "v"
                :vexpand "false"
                :hexpand "false"
(top)
(center)
(bottom)))

(defwidget top []
        (box :orientation "v"
                :space-evenly "false"
                :valign "start"
                :class "top"
(workspaces)))

(defwidget center []
        (box :orientation "v"
                :space-evenly "false"
                :valign "center"
(time)))

(defwidget bottom []
        (box :orientation "v"
                :space-evenly "false"
                :valign "end"
                :spacing 25
                :class "bottom"
(volume)
(backlight)
(battery)))
;; (power)))

;; workspaces widget
(defwidget workspaces []
        (box :orientation "v"
                :space-evenly "false"
                :valign "start"
                :spacing 15 
                :class "workspaces"
(workspace1)
(workspace2)
(workspace3)
(workspace4)
(workspace5)
(workspace6)
(workspace7)
(workspace8)
(workspace9)
(workspace10)))

(defwidget workspace1 []
  	(button		:class {"${workspace-focused}" == "0" ? "focused" : "unfocused"}
				:onclick "hyprctl dispatch workspace 1"
                {arraylength(search("${workspace-occupied}", "0")) != 0 ? "🔘" : ""}))
(defwidget workspace2 []
  	(button		:class {"${workspace-focused}" == "1" ? "focused" : "unfocused"}
				:onclick "hyprctl dispatch workspace 2"
                {arraylength(search("${workspace-occupied}", "1")) != 0 ? "🔘" : ""}))
(defwidget workspace3 []
  	(button		:class {"${workspace-focused}" == "2" ? "focused" : "unfocused"}
				:onclick "hyprctl dispatch workspace 3"
                {arraylength(search("${workspace-occupied}", "2")) != 0 ? "🔘" : ""}))
(defwidget workspace4 []
  	(button		:class {"${workspace-focused}" == "3" ? "focused" : "unfocused"}
				:onclick "hyprctl dispatch workspace 4"
                {arraylength(search("${workspace-occupied}", "3")) != 0 ? "🔘" : ""}))
(defwidget workspace5 []
  	(button		:class {"${workspace-focused}" == "4" ? "focused" : "unfocused"}
				:onclick "hyprctl dispatch workspace 5"
                {arraylength(search("${workspace-occupied}", "4")) != 0 ? "🔘" : ""}))
(defwidget workspace6 []
  	(button		:class {"${workspace-focused}" == "5" ? "focused" : "unfocused"}
				:onclick "hyprctl dispatch workspace 6"
                {arraylength(search("${workspace-occupied}", "5")) != 0 ? "🔘" : ""}))
(defwidget workspace7 []
  	(button		:class {"${workspace-focused}" == "6" ? "focused" : "unfocused"}
				:onclick "hyprctl dispatch workspace 7"
                {arraylength(search("${workspace-occupied}", "6")) != 0 ? "🔘" : ""}))
(defwidget workspace8 []
  	(button		:class {"${workspace-focused}" == "7" ? "focused" : "unfocused"}
				:onclick "hyprctl dispatch workspace 8"
                {arraylength(search("${workspace-occupied}", "7")) != 0 ? "🔘" : ""}))
(defwidget workspace9 []
  	(button		:class {"${workspace-focused}" == "8" ? "focused" : "unfocused"}
				:onclick "hyprctl dispatch workspace 9"
                {arraylength(search("${workspace-occupied}", "8")) != 0 ? "🔘" : ""}))
(defwidget workspace10 []
  	(button		:class {"${workspace-focused}" == "9" ? "focused" : "unfocused"}
				:onclick "hyprctl dispatch workspace 10"
                {arraylength(search("${workspace-occupied}", "9")) != 0 ? "🔘" : ""}))
(defpoll workspace-occupied :interval "5s" "hyprctl workspaces | grep workspace | awk '{print ($3 - 1)}' | xargs echo")
(defpoll workspace-focused :interval "5s" "hyprctl activeworkspace | grep workspace | awk '{print ($3 - 1)}'")

;; volume widget
(defwidget volume []
  (eventbox :onhover "eww update volume=true"
                        :onhoverlost "eww update volume=false"
                        :cursor "pointer"
                        :onclick "pactl set-sink-mute @DEFAULT_SINK@ toggle"
                        (box    :orientation "v"
                                        :space-evenly "false"
                        (revealer :transition "slideup"
                                        :reveal volume
                        (scale :class "volumebar-${muted}"
                                    :value current-volume
                                    :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ {}%"
                                    :orientation "v"
                                    :flipped true
                                    :max 100
                                    :min 0))
                        (revealer :transition "slideup"
                                        :reveal volume
                                        (label :class "volumetext" :text "${current-volume}%"))
                        (label :class "volume-icon-${muted}"
                                    :text {muted == "yes" ? "" : "" } ))))
(defpoll current-volume :interval "5s" "wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{printf \"%2.0f\", ($2 * 100)}'")
(defpoll muted :interval "5s" "wpctl get-volume @DEFAULT_AUDIO_SINK@ | grep -q MUTED && echo 'yes' || echo 'no'")
(defvar volume false)

;; backlight widget
(defwidget backlight []
  (eventbox :onhover "eww update backlight=true"
                        :onhoverlost "eww update backlight=false"
                        :cursor "pointer"
                        (box    :orientation "v"
                                        :space-evenly "false"
                        (revealer :transition "slideup"
                                        :reveal backlight
                        (scale :class "backlightbar"
                                    :value current-backlight
                                    :onchange "brightnessctl set {}%"
                                    :orientation "v"
                                    :flipped true
                                    :max 100
                                    :min 0))
                        (revealer :transition "slideup"
                                        :reveal backlight
                                        (label :class "backlighttext" :text "${current-backlight}%"))
                        (label :class "backlight-icon" :text ""))))
(defpoll current-backlight :interval "5s" "awk -v max=$(brightnessctl max) -v current=$(brightnessctl get) 'BEGIN { printf \"%2.0f\", ((current - 1) / max) * 100}'")
(defvar backlight false)

;; time widget
(defwidget time []
        (box    :orientation "v"
                        :class "time"
                        :valign "end"
        (button :onclick "scripts/popup calendar"
                        :class "time-hour" hour)
        (button :onclick "scripts/popup calendar"
                        :class "time-minute" minute)))
(defpoll hour   :interval "5s"  "date '+%I'")
(defpoll minute :interval "5s"  "date '+%M'")

;; battery widget
(defwidget battery []
  (eventbox :onhover "eww update battery=true"
                        :onhoverlost "eww update battery=false"
                        (box    :orientation "v"
                                        :space-evenly "false"
                                        :class "batterymenu-slider"
                        (revealer :transition "slideup"
                                        :reveal battery
                                        (label :class "batterytext" :text "${EWW_BATTERY.BAT0.capacity}%"))
                        (label 
                            :class 
                            {EWW_BATTERY.BAT0.capacity > 80 ? "battery-icon-good" :
                                EWW_BATTERY.BAT0.capacity > 50 ? "battery-icon-ok" : "battery-icon-bad"}
                            :text
                            {EWW_BATTERY.BAT0.capacity == 100 ? "" :
                                EWW_BATTERY.BAT0.capacity > 75 ? "" :
                                    EWW_BATTERY.BAT0.capacity > 50 ? "" :
                                        EWW_BATTERY.BAT0.capacity > 25 ? "" : ""}))))
(defvar battery false)

;; power widget
(defwidget power []
	(eventbox	:onhover "eww update power=true"
				:onhoverlost "eww update power=false"
                :cursor "pointer"
	(box		:orientation "v"
				:space-evenly "false"
				:vexpand "false"
				:class "powermenu"
	(revealer	:transition "slideup"
				:reveal power
	(box		:orientation "v"
				:space-evenly "false"
                :spacing 5
                :class "powermenu-slider"
  	(button		:class "button-reboot"
	  			:tooltip "reboot"
				:onclick "shutdown -r now" "")
	(button		:class "button-lock"
				:tooltip "lock screen"
				:onclick "slock" "")))
	(button		:class "button-shutdown"
                :cursor "pointer"
				:tooltip "shutdown"
				:onclick "shutdown now" ""))))
(defvar power false)
